generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- AUTHENTICATION ----- //

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  telephone          String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  password           String?
  image              String?
  accounts           Account[]
  sessions           Session[]
  UsersOrganizations UsersOrganizations[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ----- BUSINESS ----- //

model Organization {
  id                   String                @id @default(cuid())
  name                 String
  activities           String
  email                String                @unique
  telephone            String                @unique
  website              String
  generalInformation   String                @map("general_information") @db.Text
  interventionStart    DateTime              @map("intervention_start")
  interventionEnd      DateTime              @map("intervention_end")
  receptionIndications String                @map("reception_indications")
  UsersOrganizations   UsersOrganizations[]
  OrganizationsEvents  OrganizationsEvents[]

  @@map("organizations")
}

model Event {
  id                  String                @id @default(cuid())
  name                String
  location            String
  website             String
  publicStart         DateTime              @map("public_start")
  publicEnd           DateTime              @map("public_end")
  OrganizationsEvents OrganizationsEvents[]

  @@map("events")
}

// ----- RELATIONS ----- //

model UsersOrganizations {
  userId         String       @map("user_id")
  organizationId String       @map("organzation_id")
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
  @@map("users_organisations")
}

model OrganizationsEvents {
  organizationId String       @map("organzation_id")
  eventId        String       @map("event_id")
  organization   Organization @relation(fields: [organizationId], references: [id])
  event          Event        @relation(fields: [eventId], references: [id])

  @@id([organizationId, eventId])
  @@map("organizations_events")
}
